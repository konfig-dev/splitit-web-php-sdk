<?php
/**
 * InstallmentPlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Splitit
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Splitit\Model;

use \ArrayAccess;
use \Splitit\ObjectSerializer;

/**
 * InstallmentPlan Class Doc Comment
 *
 * @category Class
 * @package  Splitit
 * @implements \ArrayAccess<string, mixed>
 */
class InstallmentPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstallmentPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'installment_plan_number' => 'string',
        'installment_plan_status' => '\Splitit\Model\ReferenceEntityBase',
        'amount' => '\Splitit\Model\Money',
        'outstanding_amount' => '\Splitit\Model\Money',
        'disputes' => '\Splitit\Model\Disputes',
        'number_of_installments' => 'int',
        'number_of_processed_installments' => 'int',
        'original_amount' => '\Splitit\Model\Money',
        'refund_amount' => '\Splitit\Model\Money',
        'consumer' => '\Splitit\Model\ConsumerData',
        'active_card' => '\Splitit\Model\CardData2',
        'fraud_check' => '\Splitit\Model\FraudCheck',
        'terminal' => '\Splitit\Model\TerminalRef',
        'merchant' => '\Splitit\Model\MerchantRef',
        'ref_order_number' => 'string',
        'purchase_method' => '\Splitit\Model\ReferenceEntityBase',
        'strategy' => '\Splitit\Model\ReferenceEntityBase',
        'delay_resolution' => '\Splitit\Model\ReferenceEntityBase',
        'extended_params' => 'array<string,string>',
        'is_full_captured' => 'bool',
        'is_charged_back' => 'bool',
        'are_payments_on_hold' => 'bool',
        'scp_funding_percent' => 'float',
        'funding_status' => '\Splitit\Model\MoneyFlows',
        'test_mode' => '\Splitit\Model\TestModes',
        'creation_date_time' => '\DateTime',
        'life_time_url_expiration_time' => '\DateTime',
        'installments' => '\Splitit\Model\Installment2[]',
        'secure_authorizations' => '\Splitit\Model\ReAuthorization[]',
        'logo_url' => 'string',
        'is_in_auto_retry' => 'bool',
        'payment_method' => 'string',
        'allow_card_update_on_splitit_portals' => 'bool',
        'on_hold_last_open_date' => '\DateTime',
        'on_hold_last_open_user_id' => 'string',
        'installments_schedule_interval' => 'int',
        'external_payment_provider' => '\Splitit\Model\ExternalProviderTypes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'installment_plan_number' => null,
        'installment_plan_status' => null,
        'amount' => null,
        'outstanding_amount' => null,
        'disputes' => null,
        'number_of_installments' => 'int32',
        'number_of_processed_installments' => 'int32',
        'original_amount' => null,
        'refund_amount' => null,
        'consumer' => null,
        'active_card' => null,
        'fraud_check' => null,
        'terminal' => null,
        'merchant' => null,
        'ref_order_number' => null,
        'purchase_method' => null,
        'strategy' => null,
        'delay_resolution' => null,
        'extended_params' => null,
        'is_full_captured' => null,
        'is_charged_back' => null,
        'are_payments_on_hold' => null,
        'scp_funding_percent' => 'decimal',
        'funding_status' => null,
        'test_mode' => null,
        'creation_date_time' => 'date-time',
        'life_time_url_expiration_time' => 'date-time',
        'installments' => null,
        'secure_authorizations' => null,
        'logo_url' => null,
        'is_in_auto_retry' => null,
        'payment_method' => null,
        'allow_card_update_on_splitit_portals' => null,
        'on_hold_last_open_date' => 'date-time',
        'on_hold_last_open_user_id' => null,
        'installments_schedule_interval' => 'int32',
        'external_payment_provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'installment_plan_number' => false,
		'installment_plan_status' => false,
		'amount' => false,
		'outstanding_amount' => false,
		'disputes' => false,
		'number_of_installments' => false,
		'number_of_processed_installments' => false,
		'original_amount' => false,
		'refund_amount' => false,
		'consumer' => false,
		'active_card' => false,
		'fraud_check' => false,
		'terminal' => false,
		'merchant' => false,
		'ref_order_number' => false,
		'purchase_method' => false,
		'strategy' => false,
		'delay_resolution' => false,
		'extended_params' => false,
		'is_full_captured' => false,
		'is_charged_back' => false,
		'are_payments_on_hold' => false,
		'scp_funding_percent' => false,
		'funding_status' => false,
		'test_mode' => false,
		'creation_date_time' => false,
		'life_time_url_expiration_time' => false,
		'installments' => false,
		'secure_authorizations' => false,
		'logo_url' => false,
		'is_in_auto_retry' => false,
		'payment_method' => false,
		'allow_card_update_on_splitit_portals' => false,
		'on_hold_last_open_date' => false,
		'on_hold_last_open_user_id' => false,
		'installments_schedule_interval' => false,
		'external_payment_provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installment_plan_number' => 'InstallmentPlanNumber',
        'installment_plan_status' => 'InstallmentPlanStatus',
        'amount' => 'Amount',
        'outstanding_amount' => 'OutstandingAmount',
        'disputes' => 'Disputes',
        'number_of_installments' => 'NumberOfInstallments',
        'number_of_processed_installments' => 'NumberOfProcessedInstallments',
        'original_amount' => 'OriginalAmount',
        'refund_amount' => 'RefundAmount',
        'consumer' => 'Consumer',
        'active_card' => 'ActiveCard',
        'fraud_check' => 'FraudCheck',
        'terminal' => 'Terminal',
        'merchant' => 'Merchant',
        'ref_order_number' => 'RefOrderNumber',
        'purchase_method' => 'PurchaseMethod',
        'strategy' => 'Strategy',
        'delay_resolution' => 'DelayResolution',
        'extended_params' => 'ExtendedParams',
        'is_full_captured' => 'IsFullCaptured',
        'is_charged_back' => 'IsChargedBack',
        'are_payments_on_hold' => 'ArePaymentsOnHold',
        'scp_funding_percent' => 'ScpFundingPercent',
        'funding_status' => 'FundingStatus',
        'test_mode' => 'TestMode',
        'creation_date_time' => 'CreationDateTime',
        'life_time_url_expiration_time' => 'LifeTimeUrlExpirationTime',
        'installments' => 'Installments',
        'secure_authorizations' => 'SecureAuthorizations',
        'logo_url' => 'LogoUrl',
        'is_in_auto_retry' => 'IsInAutoRetry',
        'payment_method' => 'PaymentMethod',
        'allow_card_update_on_splitit_portals' => 'AllowCardUpdateOnSplititPortals',
        'on_hold_last_open_date' => 'OnHoldLastOpenDate',
        'on_hold_last_open_user_id' => 'OnHoldLastOpenUserId',
        'installments_schedule_interval' => 'InstallmentsScheduleInterval',
        'external_payment_provider' => 'ExternalPaymentProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installment_plan_number' => 'setInstallmentPlanNumber',
        'installment_plan_status' => 'setInstallmentPlanStatus',
        'amount' => 'setAmount',
        'outstanding_amount' => 'setOutstandingAmount',
        'disputes' => 'setDisputes',
        'number_of_installments' => 'setNumberOfInstallments',
        'number_of_processed_installments' => 'setNumberOfProcessedInstallments',
        'original_amount' => 'setOriginalAmount',
        'refund_amount' => 'setRefundAmount',
        'consumer' => 'setConsumer',
        'active_card' => 'setActiveCard',
        'fraud_check' => 'setFraudCheck',
        'terminal' => 'setTerminal',
        'merchant' => 'setMerchant',
        'ref_order_number' => 'setRefOrderNumber',
        'purchase_method' => 'setPurchaseMethod',
        'strategy' => 'setStrategy',
        'delay_resolution' => 'setDelayResolution',
        'extended_params' => 'setExtendedParams',
        'is_full_captured' => 'setIsFullCaptured',
        'is_charged_back' => 'setIsChargedBack',
        'are_payments_on_hold' => 'setArePaymentsOnHold',
        'scp_funding_percent' => 'setScpFundingPercent',
        'funding_status' => 'setFundingStatus',
        'test_mode' => 'setTestMode',
        'creation_date_time' => 'setCreationDateTime',
        'life_time_url_expiration_time' => 'setLifeTimeUrlExpirationTime',
        'installments' => 'setInstallments',
        'secure_authorizations' => 'setSecureAuthorizations',
        'logo_url' => 'setLogoUrl',
        'is_in_auto_retry' => 'setIsInAutoRetry',
        'payment_method' => 'setPaymentMethod',
        'allow_card_update_on_splitit_portals' => 'setAllowCardUpdateOnSplititPortals',
        'on_hold_last_open_date' => 'setOnHoldLastOpenDate',
        'on_hold_last_open_user_id' => 'setOnHoldLastOpenUserId',
        'installments_schedule_interval' => 'setInstallmentsScheduleInterval',
        'external_payment_provider' => 'setExternalPaymentProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installment_plan_number' => 'getInstallmentPlanNumber',
        'installment_plan_status' => 'getInstallmentPlanStatus',
        'amount' => 'getAmount',
        'outstanding_amount' => 'getOutstandingAmount',
        'disputes' => 'getDisputes',
        'number_of_installments' => 'getNumberOfInstallments',
        'number_of_processed_installments' => 'getNumberOfProcessedInstallments',
        'original_amount' => 'getOriginalAmount',
        'refund_amount' => 'getRefundAmount',
        'consumer' => 'getConsumer',
        'active_card' => 'getActiveCard',
        'fraud_check' => 'getFraudCheck',
        'terminal' => 'getTerminal',
        'merchant' => 'getMerchant',
        'ref_order_number' => 'getRefOrderNumber',
        'purchase_method' => 'getPurchaseMethod',
        'strategy' => 'getStrategy',
        'delay_resolution' => 'getDelayResolution',
        'extended_params' => 'getExtendedParams',
        'is_full_captured' => 'getIsFullCaptured',
        'is_charged_back' => 'getIsChargedBack',
        'are_payments_on_hold' => 'getArePaymentsOnHold',
        'scp_funding_percent' => 'getScpFundingPercent',
        'funding_status' => 'getFundingStatus',
        'test_mode' => 'getTestMode',
        'creation_date_time' => 'getCreationDateTime',
        'life_time_url_expiration_time' => 'getLifeTimeUrlExpirationTime',
        'installments' => 'getInstallments',
        'secure_authorizations' => 'getSecureAuthorizations',
        'logo_url' => 'getLogoUrl',
        'is_in_auto_retry' => 'getIsInAutoRetry',
        'payment_method' => 'getPaymentMethod',
        'allow_card_update_on_splitit_portals' => 'getAllowCardUpdateOnSplititPortals',
        'on_hold_last_open_date' => 'getOnHoldLastOpenDate',
        'on_hold_last_open_user_id' => 'getOnHoldLastOpenUserId',
        'installments_schedule_interval' => 'getInstallmentsScheduleInterval',
        'external_payment_provider' => 'getExternalPaymentProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('installment_plan_number', $data ?? [], null);
        $this->setIfExists('installment_plan_status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('outstanding_amount', $data ?? [], null);
        $this->setIfExists('disputes', $data ?? [], null);
        $this->setIfExists('number_of_installments', $data ?? [], null);
        $this->setIfExists('number_of_processed_installments', $data ?? [], null);
        $this->setIfExists('original_amount', $data ?? [], null);
        $this->setIfExists('refund_amount', $data ?? [], null);
        $this->setIfExists('consumer', $data ?? [], null);
        $this->setIfExists('active_card', $data ?? [], null);
        $this->setIfExists('fraud_check', $data ?? [], null);
        $this->setIfExists('terminal', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('ref_order_number', $data ?? [], null);
        $this->setIfExists('purchase_method', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('delay_resolution', $data ?? [], null);
        $this->setIfExists('extended_params', $data ?? [], null);
        $this->setIfExists('is_full_captured', $data ?? [], null);
        $this->setIfExists('is_charged_back', $data ?? [], null);
        $this->setIfExists('are_payments_on_hold', $data ?? [], null);
        $this->setIfExists('scp_funding_percent', $data ?? [], null);
        $this->setIfExists('funding_status', $data ?? [], null);
        $this->setIfExists('test_mode', $data ?? [], null);
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('life_time_url_expiration_time', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
        $this->setIfExists('secure_authorizations', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('is_in_auto_retry', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('allow_card_update_on_splitit_portals', $data ?? [], null);
        $this->setIfExists('on_hold_last_open_date', $data ?? [], null);
        $this->setIfExists('on_hold_last_open_user_id', $data ?? [], null);
        $this->setIfExists('installments_schedule_interval', $data ?? [], null);
        $this->setIfExists('external_payment_provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number_of_installments'] === null) {
            $invalidProperties[] = "'number_of_installments' can't be null";
        }
        if ($this->container['number_of_processed_installments'] === null) {
            $invalidProperties[] = "'number_of_processed_installments' can't be null";
        }
        if ($this->container['is_full_captured'] === null) {
            $invalidProperties[] = "'is_full_captured' can't be null";
        }
        if ($this->container['is_charged_back'] === null) {
            $invalidProperties[] = "'is_charged_back' can't be null";
        }
        if ($this->container['are_payments_on_hold'] === null) {
            $invalidProperties[] = "'are_payments_on_hold' can't be null";
        }
        if ($this->container['scp_funding_percent'] === null) {
            $invalidProperties[] = "'scp_funding_percent' can't be null";
        }
        if ($this->container['funding_status'] === null) {
            $invalidProperties[] = "'funding_status' can't be null";
        }
        if ($this->container['test_mode'] === null) {
            $invalidProperties[] = "'test_mode' can't be null";
        }
        if ($this->container['creation_date_time'] === null) {
            $invalidProperties[] = "'creation_date_time' can't be null";
        }
        if ($this->container['life_time_url_expiration_time'] === null) {
            $invalidProperties[] = "'life_time_url_expiration_time' can't be null";
        }
        if ($this->container['is_in_auto_retry'] === null) {
            $invalidProperties[] = "'is_in_auto_retry' can't be null";
        }
        if ($this->container['allow_card_update_on_splitit_portals'] === null) {
            $invalidProperties[] = "'allow_card_update_on_splitit_portals' can't be null";
        }
        if ($this->container['installments_schedule_interval'] === null) {
            $invalidProperties[] = "'installments_schedule_interval' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installment_plan_number
     *
     * @return string|null
     */
    public function getInstallmentPlanNumber()
    {
        return $this->container['installment_plan_number'];
    }

    /**
     * Sets installment_plan_number
     *
     * @param string|null $installment_plan_number installment_plan_number
     *
     * @return self
     */
    public function setInstallmentPlanNumber($installment_plan_number)
    {

        if (is_null($installment_plan_number)) {
            throw new \InvalidArgumentException('non-nullable installment_plan_number cannot be null');
        }

        $this->container['installment_plan_number'] = $installment_plan_number;

        return $this;
    }

    /**
     * Gets installment_plan_status
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getInstallmentPlanStatus()
    {
        return $this->container['installment_plan_status'];
    }

    /**
     * Sets installment_plan_status
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $installment_plan_status installment_plan_status
     *
     * @return self
     */
    public function setInstallmentPlanStatus($installment_plan_status)
    {

        if (is_null($installment_plan_status)) {
            throw new \InvalidArgumentException('non-nullable installment_plan_status cannot be null');
        }

        $this->container['installment_plan_status'] = $installment_plan_status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Splitit\Model\Money|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets outstanding_amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getOutstandingAmount()
    {
        return $this->container['outstanding_amount'];
    }

    /**
     * Sets outstanding_amount
     *
     * @param \Splitit\Model\Money|null $outstanding_amount outstanding_amount
     *
     * @return self
     */
    public function setOutstandingAmount($outstanding_amount)
    {

        if (is_null($outstanding_amount)) {
            throw new \InvalidArgumentException('non-nullable outstanding_amount cannot be null');
        }

        $this->container['outstanding_amount'] = $outstanding_amount;

        return $this;
    }

    /**
     * Gets disputes
     *
     * @return \Splitit\Model\Disputes|null
     */
    public function getDisputes()
    {
        return $this->container['disputes'];
    }

    /**
     * Sets disputes
     *
     * @param \Splitit\Model\Disputes|null $disputes disputes
     *
     * @return self
     */
    public function setDisputes($disputes)
    {

        if (is_null($disputes)) {
            throw new \InvalidArgumentException('non-nullable disputes cannot be null');
        }

        $this->container['disputes'] = $disputes;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int $number_of_installments number_of_installments
     *
     * @return self
     */
    public function setNumberOfInstallments($number_of_installments)
    {

        if (is_null($number_of_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_installments cannot be null');
        }

        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets number_of_processed_installments
     *
     * @return int
     */
    public function getNumberOfProcessedInstallments()
    {
        return $this->container['number_of_processed_installments'];
    }

    /**
     * Sets number_of_processed_installments
     *
     * @param int $number_of_processed_installments number_of_processed_installments
     *
     * @return self
     */
    public function setNumberOfProcessedInstallments($number_of_processed_installments)
    {

        if (is_null($number_of_processed_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_processed_installments cannot be null');
        }

        $this->container['number_of_processed_installments'] = $number_of_processed_installments;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param \Splitit\Model\Money|null $original_amount original_amount
     *
     * @return self
     */
    public function setOriginalAmount($original_amount)
    {

        if (is_null($original_amount)) {
            throw new \InvalidArgumentException('non-nullable original_amount cannot be null');
        }

        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param \Splitit\Model\Money|null $refund_amount refund_amount
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {

        if (is_null($refund_amount)) {
            throw new \InvalidArgumentException('non-nullable refund_amount cannot be null');
        }

        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets consumer
     *
     * @return \Splitit\Model\ConsumerData|null
     */
    public function getConsumer()
    {
        return $this->container['consumer'];
    }

    /**
     * Sets consumer
     *
     * @param \Splitit\Model\ConsumerData|null $consumer consumer
     *
     * @return self
     */
    public function setConsumer($consumer)
    {

        if (is_null($consumer)) {
            throw new \InvalidArgumentException('non-nullable consumer cannot be null');
        }

        $this->container['consumer'] = $consumer;

        return $this;
    }

    /**
     * Gets active_card
     *
     * @return \Splitit\Model\CardData2|null
     */
    public function getActiveCard()
    {
        return $this->container['active_card'];
    }

    /**
     * Sets active_card
     *
     * @param \Splitit\Model\CardData2|null $active_card active_card
     *
     * @return self
     */
    public function setActiveCard($active_card)
    {

        if (is_null($active_card)) {
            throw new \InvalidArgumentException('non-nullable active_card cannot be null');
        }

        $this->container['active_card'] = $active_card;

        return $this;
    }

    /**
     * Gets fraud_check
     *
     * @return \Splitit\Model\FraudCheck|null
     */
    public function getFraudCheck()
    {
        return $this->container['fraud_check'];
    }

    /**
     * Sets fraud_check
     *
     * @param \Splitit\Model\FraudCheck|null $fraud_check fraud_check
     *
     * @return self
     */
    public function setFraudCheck($fraud_check)
    {

        if (is_null($fraud_check)) {
            throw new \InvalidArgumentException('non-nullable fraud_check cannot be null');
        }

        $this->container['fraud_check'] = $fraud_check;

        return $this;
    }

    /**
     * Gets terminal
     *
     * @return \Splitit\Model\TerminalRef|null
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param \Splitit\Model\TerminalRef|null $terminal terminal
     *
     * @return self
     */
    public function setTerminal($terminal)
    {

        if (is_null($terminal)) {
            throw new \InvalidArgumentException('non-nullable terminal cannot be null');
        }

        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Splitit\Model\MerchantRef|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Splitit\Model\MerchantRef|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {

        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }

        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets ref_order_number
     *
     * @return string|null
     */
    public function getRefOrderNumber()
    {
        return $this->container['ref_order_number'];
    }

    /**
     * Sets ref_order_number
     *
     * @param string|null $ref_order_number ref_order_number
     *
     * @return self
     */
    public function setRefOrderNumber($ref_order_number)
    {

        if (is_null($ref_order_number)) {
            throw new \InvalidArgumentException('non-nullable ref_order_number cannot be null');
        }

        $this->container['ref_order_number'] = $ref_order_number;

        return $this;
    }

    /**
     * Gets purchase_method
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getPurchaseMethod()
    {
        return $this->container['purchase_method'];
    }

    /**
     * Sets purchase_method
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $purchase_method purchase_method
     *
     * @return self
     */
    public function setPurchaseMethod($purchase_method)
    {

        if (is_null($purchase_method)) {
            throw new \InvalidArgumentException('non-nullable purchase_method cannot be null');
        }

        $this->container['purchase_method'] = $purchase_method;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {

        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }

        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets delay_resolution
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getDelayResolution()
    {
        return $this->container['delay_resolution'];
    }

    /**
     * Sets delay_resolution
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $delay_resolution delay_resolution
     *
     * @return self
     */
    public function setDelayResolution($delay_resolution)
    {

        if (is_null($delay_resolution)) {
            throw new \InvalidArgumentException('non-nullable delay_resolution cannot be null');
        }

        $this->container['delay_resolution'] = $delay_resolution;

        return $this;
    }

    /**
     * Gets extended_params
     *
     * @return array<string,string>|null
     */
    public function getExtendedParams()
    {
        return $this->container['extended_params'];
    }

    /**
     * Sets extended_params
     *
     * @param array<string,string>|null $extended_params extended_params
     *
     * @return self
     */
    public function setExtendedParams($extended_params)
    {

        if (is_null($extended_params)) {
            throw new \InvalidArgumentException('non-nullable extended_params cannot be null');
        }

        $this->container['extended_params'] = $extended_params;

        return $this;
    }

    /**
     * Gets is_full_captured
     *
     * @return bool
     */
    public function getIsFullCaptured()
    {
        return $this->container['is_full_captured'];
    }

    /**
     * Sets is_full_captured
     *
     * @param bool $is_full_captured is_full_captured
     *
     * @return self
     */
    public function setIsFullCaptured($is_full_captured)
    {

        if (is_null($is_full_captured)) {
            throw new \InvalidArgumentException('non-nullable is_full_captured cannot be null');
        }

        $this->container['is_full_captured'] = $is_full_captured;

        return $this;
    }

    /**
     * Gets is_charged_back
     *
     * @return bool
     */
    public function getIsChargedBack()
    {
        return $this->container['is_charged_back'];
    }

    /**
     * Sets is_charged_back
     *
     * @param bool $is_charged_back is_charged_back
     *
     * @return self
     */
    public function setIsChargedBack($is_charged_back)
    {

        if (is_null($is_charged_back)) {
            throw new \InvalidArgumentException('non-nullable is_charged_back cannot be null');
        }

        $this->container['is_charged_back'] = $is_charged_back;

        return $this;
    }

    /**
     * Gets are_payments_on_hold
     *
     * @return bool
     */
    public function getArePaymentsOnHold()
    {
        return $this->container['are_payments_on_hold'];
    }

    /**
     * Sets are_payments_on_hold
     *
     * @param bool $are_payments_on_hold are_payments_on_hold
     *
     * @return self
     */
    public function setArePaymentsOnHold($are_payments_on_hold)
    {

        if (is_null($are_payments_on_hold)) {
            throw new \InvalidArgumentException('non-nullable are_payments_on_hold cannot be null');
        }

        $this->container['are_payments_on_hold'] = $are_payments_on_hold;

        return $this;
    }

    /**
     * Gets scp_funding_percent
     *
     * @return float
     */
    public function getScpFundingPercent()
    {
        return $this->container['scp_funding_percent'];
    }

    /**
     * Sets scp_funding_percent
     *
     * @param float $scp_funding_percent scp_funding_percent
     *
     * @return self
     */
    public function setScpFundingPercent($scp_funding_percent)
    {

        if (is_null($scp_funding_percent)) {
            throw new \InvalidArgumentException('non-nullable scp_funding_percent cannot be null');
        }

        $this->container['scp_funding_percent'] = $scp_funding_percent;

        return $this;
    }

    /**
     * Gets funding_status
     *
     * @return \Splitit\Model\MoneyFlows
     */
    public function getFundingStatus()
    {
        return $this->container['funding_status'];
    }

    /**
     * Sets funding_status
     *
     * @param \Splitit\Model\MoneyFlows $funding_status funding_status
     *
     * @return self
     */
    public function setFundingStatus($funding_status)
    {

        if (is_null($funding_status)) {
            throw new \InvalidArgumentException('non-nullable funding_status cannot be null');
        }

        $this->container['funding_status'] = $funding_status;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return \Splitit\Model\TestModes
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param \Splitit\Model\TestModes $test_mode test_mode
     *
     * @return self
     */
    public function setTestMode($test_mode)
    {

        if (is_null($test_mode)) {
            throw new \InvalidArgumentException('non-nullable test_mode cannot be null');
        }

        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return \DateTime
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param \DateTime $creation_date_time creation_date_time
     *
     * @return self
     */
    public function setCreationDateTime($creation_date_time)
    {

        if (is_null($creation_date_time)) {
            throw new \InvalidArgumentException('non-nullable creation_date_time cannot be null');
        }

        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets life_time_url_expiration_time
     *
     * @return \DateTime
     */
    public function getLifeTimeUrlExpirationTime()
    {
        return $this->container['life_time_url_expiration_time'];
    }

    /**
     * Sets life_time_url_expiration_time
     *
     * @param \DateTime $life_time_url_expiration_time life_time_url_expiration_time
     *
     * @return self
     */
    public function setLifeTimeUrlExpirationTime($life_time_url_expiration_time)
    {

        if (is_null($life_time_url_expiration_time)) {
            throw new \InvalidArgumentException('non-nullable life_time_url_expiration_time cannot be null');
        }

        $this->container['life_time_url_expiration_time'] = $life_time_url_expiration_time;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Splitit\Model\Installment2[]|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Splitit\Model\Installment2[]|null $installments installments
     *
     * @return self
     */
    public function setInstallments($installments)
    {

        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }

        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets secure_authorizations
     *
     * @return \Splitit\Model\ReAuthorization[]|null
     */
    public function getSecureAuthorizations()
    {
        return $this->container['secure_authorizations'];
    }

    /**
     * Sets secure_authorizations
     *
     * @param \Splitit\Model\ReAuthorization[]|null $secure_authorizations secure_authorizations
     *
     * @return self
     */
    public function setSecureAuthorizations($secure_authorizations)
    {

        if (is_null($secure_authorizations)) {
            throw new \InvalidArgumentException('non-nullable secure_authorizations cannot be null');
        }

        $this->container['secure_authorizations'] = $secure_authorizations;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {

        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }

        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets is_in_auto_retry
     *
     * @return bool
     */
    public function getIsInAutoRetry()
    {
        return $this->container['is_in_auto_retry'];
    }

    /**
     * Sets is_in_auto_retry
     *
     * @param bool $is_in_auto_retry is_in_auto_retry
     *
     * @return self
     */
    public function setIsInAutoRetry($is_in_auto_retry)
    {

        if (is_null($is_in_auto_retry)) {
            throw new \InvalidArgumentException('non-nullable is_in_auto_retry cannot be null');
        }

        $this->container['is_in_auto_retry'] = $is_in_auto_retry;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {

        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets allow_card_update_on_splitit_portals
     *
     * @return bool
     */
    public function getAllowCardUpdateOnSplititPortals()
    {
        return $this->container['allow_card_update_on_splitit_portals'];
    }

    /**
     * Sets allow_card_update_on_splitit_portals
     *
     * @param bool $allow_card_update_on_splitit_portals allow_card_update_on_splitit_portals
     *
     * @return self
     */
    public function setAllowCardUpdateOnSplititPortals($allow_card_update_on_splitit_portals)
    {

        if (is_null($allow_card_update_on_splitit_portals)) {
            throw new \InvalidArgumentException('non-nullable allow_card_update_on_splitit_portals cannot be null');
        }

        $this->container['allow_card_update_on_splitit_portals'] = $allow_card_update_on_splitit_portals;

        return $this;
    }

    /**
     * Gets on_hold_last_open_date
     *
     * @return \DateTime|null
     */
    public function getOnHoldLastOpenDate()
    {
        return $this->container['on_hold_last_open_date'];
    }

    /**
     * Sets on_hold_last_open_date
     *
     * @param \DateTime|null $on_hold_last_open_date on_hold_last_open_date
     *
     * @return self
     */
    public function setOnHoldLastOpenDate($on_hold_last_open_date)
    {

        if (is_null($on_hold_last_open_date)) {
            throw new \InvalidArgumentException('non-nullable on_hold_last_open_date cannot be null');
        }

        $this->container['on_hold_last_open_date'] = $on_hold_last_open_date;

        return $this;
    }

    /**
     * Gets on_hold_last_open_user_id
     *
     * @return string|null
     */
    public function getOnHoldLastOpenUserId()
    {
        return $this->container['on_hold_last_open_user_id'];
    }

    /**
     * Sets on_hold_last_open_user_id
     *
     * @param string|null $on_hold_last_open_user_id on_hold_last_open_user_id
     *
     * @return self
     */
    public function setOnHoldLastOpenUserId($on_hold_last_open_user_id)
    {

        if (is_null($on_hold_last_open_user_id)) {
            throw new \InvalidArgumentException('non-nullable on_hold_last_open_user_id cannot be null');
        }

        $this->container['on_hold_last_open_user_id'] = $on_hold_last_open_user_id;

        return $this;
    }

    /**
     * Gets installments_schedule_interval
     *
     * @return int
     */
    public function getInstallmentsScheduleInterval()
    {
        return $this->container['installments_schedule_interval'];
    }

    /**
     * Sets installments_schedule_interval
     *
     * @param int $installments_schedule_interval installments_schedule_interval
     *
     * @return self
     */
    public function setInstallmentsScheduleInterval($installments_schedule_interval)
    {

        if (is_null($installments_schedule_interval)) {
            throw new \InvalidArgumentException('non-nullable installments_schedule_interval cannot be null');
        }

        $this->container['installments_schedule_interval'] = $installments_schedule_interval;

        return $this;
    }

    /**
     * Gets external_payment_provider
     *
     * @return \Splitit\Model\ExternalProviderTypes|null
     */
    public function getExternalPaymentProvider()
    {
        return $this->container['external_payment_provider'];
    }

    /**
     * Sets external_payment_provider
     *
     * @param \Splitit\Model\ExternalProviderTypes|null $external_payment_provider external_payment_provider
     *
     * @return self
     */
    public function setExternalPaymentProvider($external_payment_provider)
    {

        if (is_null($external_payment_provider)) {
            throw new \InvalidArgumentException('non-nullable external_payment_provider cannot be null');
        }

        $this->container['external_payment_provider'] = $external_payment_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


