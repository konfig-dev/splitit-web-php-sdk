<?php
/**
 * Installment2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Splitit
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Splitit\Model;

use \ArrayAccess;
use \Splitit\ObjectSerializer;

/**
 * Installment2 Class Doc Comment
 *
 * @category Class
 * @package  Splitit
 * @implements \ArrayAccess<string, mixed>
 */
class Installment2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Installment2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'installment_id' => 'string',
        'installment_number' => 'int',
        'amount' => '\Splitit\Model\Money',
        'original_amount' => '\Splitit\Model\Money',
        'refund_amount' => '\Splitit\Model\Money',
        'process_date_time' => '\DateTime',
        'is_refund' => 'bool',
        'required_credit' => '\Splitit\Model\Money',
        'created_date_time' => '\DateTime',
        'status' => '\Splitit\Model\ReferenceEntityBase',
        'transaction_results' => '\Splitit\Model\TransactionResult[]',
        'card_details' => '\Splitit\Model\CardData2',
        'result' => 'bool',
        'payment_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'installment_id' => null,
        'installment_number' => 'int32',
        'amount' => null,
        'original_amount' => null,
        'refund_amount' => null,
        'process_date_time' => 'date-time',
        'is_refund' => null,
        'required_credit' => null,
        'created_date_time' => 'date-time',
        'status' => null,
        'transaction_results' => null,
        'card_details' => null,
        'result' => null,
        'payment_method' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'installment_id' => false,
		'installment_number' => false,
		'amount' => false,
		'original_amount' => false,
		'refund_amount' => false,
		'process_date_time' => false,
		'is_refund' => false,
		'required_credit' => false,
		'created_date_time' => false,
		'status' => false,
		'transaction_results' => false,
		'card_details' => false,
		'result' => false,
		'payment_method' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installment_id' => 'InstallmentId',
        'installment_number' => 'InstallmentNumber',
        'amount' => 'Amount',
        'original_amount' => 'OriginalAmount',
        'refund_amount' => 'RefundAmount',
        'process_date_time' => 'ProcessDateTime',
        'is_refund' => 'IsRefund',
        'required_credit' => 'RequiredCredit',
        'created_date_time' => 'CreatedDateTime',
        'status' => 'Status',
        'transaction_results' => 'TransactionResults',
        'card_details' => 'CardDetails',
        'result' => 'Result',
        'payment_method' => 'PaymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installment_id' => 'setInstallmentId',
        'installment_number' => 'setInstallmentNumber',
        'amount' => 'setAmount',
        'original_amount' => 'setOriginalAmount',
        'refund_amount' => 'setRefundAmount',
        'process_date_time' => 'setProcessDateTime',
        'is_refund' => 'setIsRefund',
        'required_credit' => 'setRequiredCredit',
        'created_date_time' => 'setCreatedDateTime',
        'status' => 'setStatus',
        'transaction_results' => 'setTransactionResults',
        'card_details' => 'setCardDetails',
        'result' => 'setResult',
        'payment_method' => 'setPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installment_id' => 'getInstallmentId',
        'installment_number' => 'getInstallmentNumber',
        'amount' => 'getAmount',
        'original_amount' => 'getOriginalAmount',
        'refund_amount' => 'getRefundAmount',
        'process_date_time' => 'getProcessDateTime',
        'is_refund' => 'getIsRefund',
        'required_credit' => 'getRequiredCredit',
        'created_date_time' => 'getCreatedDateTime',
        'status' => 'getStatus',
        'transaction_results' => 'getTransactionResults',
        'card_details' => 'getCardDetails',
        'result' => 'getResult',
        'payment_method' => 'getPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('installment_id', $data ?? [], null);
        $this->setIfExists('installment_number', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('original_amount', $data ?? [], null);
        $this->setIfExists('refund_amount', $data ?? [], null);
        $this->setIfExists('process_date_time', $data ?? [], null);
        $this->setIfExists('is_refund', $data ?? [], null);
        $this->setIfExists('required_credit', $data ?? [], null);
        $this->setIfExists('created_date_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transaction_results', $data ?? [], null);
        $this->setIfExists('card_details', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['installment_number'] === null) {
            $invalidProperties[] = "'installment_number' can't be null";
        }
        if ($this->container['is_refund'] === null) {
            $invalidProperties[] = "'is_refund' can't be null";
        }
        if ($this->container['created_date_time'] === null) {
            $invalidProperties[] = "'created_date_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installment_id
     *
     * @return string|null
     */
    public function getInstallmentId()
    {
        return $this->container['installment_id'];
    }

    /**
     * Sets installment_id
     *
     * @param string|null $installment_id installment_id
     *
     * @return self
     */
    public function setInstallmentId($installment_id)
    {

        if (is_null($installment_id)) {
            throw new \InvalidArgumentException('non-nullable installment_id cannot be null');
        }

        $this->container['installment_id'] = $installment_id;

        return $this;
    }

    /**
     * Gets installment_number
     *
     * @return int
     */
    public function getInstallmentNumber()
    {
        return $this->container['installment_number'];
    }

    /**
     * Sets installment_number
     *
     * @param int $installment_number installment_number
     *
     * @return self
     */
    public function setInstallmentNumber($installment_number)
    {

        if (is_null($installment_number)) {
            throw new \InvalidArgumentException('non-nullable installment_number cannot be null');
        }

        $this->container['installment_number'] = $installment_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Splitit\Model\Money|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param \Splitit\Model\Money|null $original_amount original_amount
     *
     * @return self
     */
    public function setOriginalAmount($original_amount)
    {

        if (is_null($original_amount)) {
            throw new \InvalidArgumentException('non-nullable original_amount cannot be null');
        }

        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return \Splitit\Model\Money|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param \Splitit\Model\Money|null $refund_amount refund_amount
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {

        if (is_null($refund_amount)) {
            throw new \InvalidArgumentException('non-nullable refund_amount cannot be null');
        }

        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets process_date_time
     *
     * @return \DateTime|null
     */
    public function getProcessDateTime()
    {
        return $this->container['process_date_time'];
    }

    /**
     * Sets process_date_time
     *
     * @param \DateTime|null $process_date_time process_date_time
     *
     * @return self
     */
    public function setProcessDateTime($process_date_time)
    {

        if (is_null($process_date_time)) {
            throw new \InvalidArgumentException('non-nullable process_date_time cannot be null');
        }

        $this->container['process_date_time'] = $process_date_time;

        return $this;
    }

    /**
     * Gets is_refund
     *
     * @return bool
     */
    public function getIsRefund()
    {
        return $this->container['is_refund'];
    }

    /**
     * Sets is_refund
     *
     * @param bool $is_refund is_refund
     *
     * @return self
     */
    public function setIsRefund($is_refund)
    {

        if (is_null($is_refund)) {
            throw new \InvalidArgumentException('non-nullable is_refund cannot be null');
        }

        $this->container['is_refund'] = $is_refund;

        return $this;
    }

    /**
     * Gets required_credit
     *
     * @return \Splitit\Model\Money|null
     */
    public function getRequiredCredit()
    {
        return $this->container['required_credit'];
    }

    /**
     * Sets required_credit
     *
     * @param \Splitit\Model\Money|null $required_credit required_credit
     *
     * @return self
     */
    public function setRequiredCredit($required_credit)
    {

        if (is_null($required_credit)) {
            throw new \InvalidArgumentException('non-nullable required_credit cannot be null');
        }

        $this->container['required_credit'] = $required_credit;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time created_date_time
     *
     * @return self
     */
    public function setCreatedDateTime($created_date_time)
    {

        if (is_null($created_date_time)) {
            throw new \InvalidArgumentException('non-nullable created_date_time cannot be null');
        }

        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction_results
     *
     * @return \Splitit\Model\TransactionResult[]|null
     */
    public function getTransactionResults()
    {
        return $this->container['transaction_results'];
    }

    /**
     * Sets transaction_results
     *
     * @param \Splitit\Model\TransactionResult[]|null $transaction_results transaction_results
     *
     * @return self
     */
    public function setTransactionResults($transaction_results)
    {

        if (is_null($transaction_results)) {
            throw new \InvalidArgumentException('non-nullable transaction_results cannot be null');
        }

        $this->container['transaction_results'] = $transaction_results;

        return $this;
    }

    /**
     * Gets card_details
     *
     * @return \Splitit\Model\CardData2|null
     */
    public function getCardDetails()
    {
        return $this->container['card_details'];
    }

    /**
     * Sets card_details
     *
     * @param \Splitit\Model\CardData2|null $card_details card_details
     *
     * @return self
     */
    public function setCardDetails($card_details)
    {

        if (is_null($card_details)) {
            throw new \InvalidArgumentException('non-nullable card_details cannot be null');
        }

        $this->container['card_details'] = $card_details;

        return $this;
    }

    /**
     * Gets result
     *
     * @return bool|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param bool|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {

        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


