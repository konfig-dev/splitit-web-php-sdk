<?php
/**
 * TransactionResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Splitit
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Splitit\Model;

use \ArrayAccess;
use \Splitit\ObjectSerializer;

/**
 * TransactionResult Class Doc Comment
 *
 * @category Class
 * @package  Splitit
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gateway_transaction_id' => 'string',
        'splitit_transaction_id' => 'int',
        'splitit_gateway_transaction_id' => 'string',
        'gateway_result_code' => 'string',
        'gateway_result_message' => 'string',
        'operation_type' => '\Splitit\Model\ReferenceEntityBase',
        'gateway_result' => 'bool',
        'gateway_transaction_date' => '\DateTime',
        'is_chargeback' => 'bool',
        'avs_result' => '\Splitit\Model\CardResult',
        'cvc_result' => '\Splitit\Model\CardResult',
        'is_in_dispute' => 'bool',
        'dispute_status' => '\Splitit\Model\DisputeStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gateway_transaction_id' => null,
        'splitit_transaction_id' => 'int64',
        'splitit_gateway_transaction_id' => null,
        'gateway_result_code' => null,
        'gateway_result_message' => null,
        'operation_type' => null,
        'gateway_result' => null,
        'gateway_transaction_date' => 'date-time',
        'is_chargeback' => null,
        'avs_result' => null,
        'cvc_result' => null,
        'is_in_dispute' => null,
        'dispute_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'gateway_transaction_id' => false,
		'splitit_transaction_id' => false,
		'splitit_gateway_transaction_id' => false,
		'gateway_result_code' => false,
		'gateway_result_message' => false,
		'operation_type' => false,
		'gateway_result' => false,
		'gateway_transaction_date' => false,
		'is_chargeback' => false,
		'avs_result' => false,
		'cvc_result' => false,
		'is_in_dispute' => false,
		'dispute_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gateway_transaction_id' => 'GatewayTransactionId',
        'splitit_transaction_id' => 'SplititTransactionId',
        'splitit_gateway_transaction_id' => 'SplititGatewayTransactionId',
        'gateway_result_code' => 'GatewayResultCode',
        'gateway_result_message' => 'GatewayResultMessage',
        'operation_type' => 'OperationType',
        'gateway_result' => 'GatewayResult',
        'gateway_transaction_date' => 'GatewayTransactionDate',
        'is_chargeback' => 'IsChargeback',
        'avs_result' => 'AVSResult',
        'cvc_result' => 'CVCResult',
        'is_in_dispute' => 'IsInDispute',
        'dispute_status' => 'DisputeStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gateway_transaction_id' => 'setGatewayTransactionId',
        'splitit_transaction_id' => 'setSplititTransactionId',
        'splitit_gateway_transaction_id' => 'setSplititGatewayTransactionId',
        'gateway_result_code' => 'setGatewayResultCode',
        'gateway_result_message' => 'setGatewayResultMessage',
        'operation_type' => 'setOperationType',
        'gateway_result' => 'setGatewayResult',
        'gateway_transaction_date' => 'setGatewayTransactionDate',
        'is_chargeback' => 'setIsChargeback',
        'avs_result' => 'setAvsResult',
        'cvc_result' => 'setCvcResult',
        'is_in_dispute' => 'setIsInDispute',
        'dispute_status' => 'setDisputeStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gateway_transaction_id' => 'getGatewayTransactionId',
        'splitit_transaction_id' => 'getSplititTransactionId',
        'splitit_gateway_transaction_id' => 'getSplititGatewayTransactionId',
        'gateway_result_code' => 'getGatewayResultCode',
        'gateway_result_message' => 'getGatewayResultMessage',
        'operation_type' => 'getOperationType',
        'gateway_result' => 'getGatewayResult',
        'gateway_transaction_date' => 'getGatewayTransactionDate',
        'is_chargeback' => 'getIsChargeback',
        'avs_result' => 'getAvsResult',
        'cvc_result' => 'getCvcResult',
        'is_in_dispute' => 'getIsInDispute',
        'dispute_status' => 'getDisputeStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gateway_transaction_id', $data ?? [], null);
        $this->setIfExists('splitit_transaction_id', $data ?? [], null);
        $this->setIfExists('splitit_gateway_transaction_id', $data ?? [], null);
        $this->setIfExists('gateway_result_code', $data ?? [], null);
        $this->setIfExists('gateway_result_message', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('gateway_result', $data ?? [], null);
        $this->setIfExists('gateway_transaction_date', $data ?? [], null);
        $this->setIfExists('is_chargeback', $data ?? [], null);
        $this->setIfExists('avs_result', $data ?? [], null);
        $this->setIfExists('cvc_result', $data ?? [], null);
        $this->setIfExists('is_in_dispute', $data ?? [], null);
        $this->setIfExists('dispute_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['splitit_transaction_id'] === null) {
            $invalidProperties[] = "'splitit_transaction_id' can't be null";
        }
        if ($this->container['gateway_result'] === null) {
            $invalidProperties[] = "'gateway_result' can't be null";
        }
        if ($this->container['gateway_transaction_date'] === null) {
            $invalidProperties[] = "'gateway_transaction_date' can't be null";
        }
        if ($this->container['is_chargeback'] === null) {
            $invalidProperties[] = "'is_chargeback' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gateway_transaction_id
     *
     * @return string|null
     */
    public function getGatewayTransactionId()
    {
        return $this->container['gateway_transaction_id'];
    }

    /**
     * Sets gateway_transaction_id
     *
     * @param string|null $gateway_transaction_id gateway_transaction_id
     *
     * @return self
     */
    public function setGatewayTransactionId($gateway_transaction_id)
    {

        if (is_null($gateway_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable gateway_transaction_id cannot be null');
        }

        $this->container['gateway_transaction_id'] = $gateway_transaction_id;

        return $this;
    }

    /**
     * Gets splitit_transaction_id
     *
     * @return int
     */
    public function getSplititTransactionId()
    {
        return $this->container['splitit_transaction_id'];
    }

    /**
     * Sets splitit_transaction_id
     *
     * @param int $splitit_transaction_id splitit_transaction_id
     *
     * @return self
     */
    public function setSplititTransactionId($splitit_transaction_id)
    {

        if (is_null($splitit_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable splitit_transaction_id cannot be null');
        }

        $this->container['splitit_transaction_id'] = $splitit_transaction_id;

        return $this;
    }

    /**
     * Gets splitit_gateway_transaction_id
     *
     * @return string|null
     */
    public function getSplititGatewayTransactionId()
    {
        return $this->container['splitit_gateway_transaction_id'];
    }

    /**
     * Sets splitit_gateway_transaction_id
     *
     * @param string|null $splitit_gateway_transaction_id splitit_gateway_transaction_id
     *
     * @return self
     */
    public function setSplititGatewayTransactionId($splitit_gateway_transaction_id)
    {

        if (is_null($splitit_gateway_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable splitit_gateway_transaction_id cannot be null');
        }

        $this->container['splitit_gateway_transaction_id'] = $splitit_gateway_transaction_id;

        return $this;
    }

    /**
     * Gets gateway_result_code
     *
     * @return string|null
     */
    public function getGatewayResultCode()
    {
        return $this->container['gateway_result_code'];
    }

    /**
     * Sets gateway_result_code
     *
     * @param string|null $gateway_result_code gateway_result_code
     *
     * @return self
     */
    public function setGatewayResultCode($gateway_result_code)
    {

        if (is_null($gateway_result_code)) {
            throw new \InvalidArgumentException('non-nullable gateway_result_code cannot be null');
        }

        $this->container['gateway_result_code'] = $gateway_result_code;

        return $this;
    }

    /**
     * Gets gateway_result_message
     *
     * @return string|null
     */
    public function getGatewayResultMessage()
    {
        return $this->container['gateway_result_message'];
    }

    /**
     * Sets gateway_result_message
     *
     * @param string|null $gateway_result_message gateway_result_message
     *
     * @return self
     */
    public function setGatewayResultMessage($gateway_result_message)
    {

        if (is_null($gateway_result_message)) {
            throw new \InvalidArgumentException('non-nullable gateway_result_message cannot be null');
        }

        $this->container['gateway_result_message'] = $gateway_result_message;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return \Splitit\Model\ReferenceEntityBase|null
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param \Splitit\Model\ReferenceEntityBase|null $operation_type operation_type
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {

        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }

        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets gateway_result
     *
     * @return bool
     */
    public function getGatewayResult()
    {
        return $this->container['gateway_result'];
    }

    /**
     * Sets gateway_result
     *
     * @param bool $gateway_result gateway_result
     *
     * @return self
     */
    public function setGatewayResult($gateway_result)
    {

        if (is_null($gateway_result)) {
            throw new \InvalidArgumentException('non-nullable gateway_result cannot be null');
        }

        $this->container['gateway_result'] = $gateway_result;

        return $this;
    }

    /**
     * Gets gateway_transaction_date
     *
     * @return \DateTime
     */
    public function getGatewayTransactionDate()
    {
        return $this->container['gateway_transaction_date'];
    }

    /**
     * Sets gateway_transaction_date
     *
     * @param \DateTime $gateway_transaction_date gateway_transaction_date
     *
     * @return self
     */
    public function setGatewayTransactionDate($gateway_transaction_date)
    {

        if (is_null($gateway_transaction_date)) {
            throw new \InvalidArgumentException('non-nullable gateway_transaction_date cannot be null');
        }

        $this->container['gateway_transaction_date'] = $gateway_transaction_date;

        return $this;
    }

    /**
     * Gets is_chargeback
     *
     * @return bool
     */
    public function getIsChargeback()
    {
        return $this->container['is_chargeback'];
    }

    /**
     * Sets is_chargeback
     *
     * @param bool $is_chargeback is_chargeback
     *
     * @return self
     */
    public function setIsChargeback($is_chargeback)
    {

        if (is_null($is_chargeback)) {
            throw new \InvalidArgumentException('non-nullable is_chargeback cannot be null');
        }

        $this->container['is_chargeback'] = $is_chargeback;

        return $this;
    }

    /**
     * Gets avs_result
     *
     * @return \Splitit\Model\CardResult|null
     */
    public function getAvsResult()
    {
        return $this->container['avs_result'];
    }

    /**
     * Sets avs_result
     *
     * @param \Splitit\Model\CardResult|null $avs_result avs_result
     *
     * @return self
     */
    public function setAvsResult($avs_result)
    {

        if (is_null($avs_result)) {
            throw new \InvalidArgumentException('non-nullable avs_result cannot be null');
        }

        $this->container['avs_result'] = $avs_result;

        return $this;
    }

    /**
     * Gets cvc_result
     *
     * @return \Splitit\Model\CardResult|null
     */
    public function getCvcResult()
    {
        return $this->container['cvc_result'];
    }

    /**
     * Sets cvc_result
     *
     * @param \Splitit\Model\CardResult|null $cvc_result cvc_result
     *
     * @return self
     */
    public function setCvcResult($cvc_result)
    {

        if (is_null($cvc_result)) {
            throw new \InvalidArgumentException('non-nullable cvc_result cannot be null');
        }

        $this->container['cvc_result'] = $cvc_result;

        return $this;
    }

    /**
     * Gets is_in_dispute
     *
     * @return bool|null
     */
    public function getIsInDispute()
    {
        return $this->container['is_in_dispute'];
    }

    /**
     * Sets is_in_dispute
     *
     * @param bool|null $is_in_dispute is_in_dispute
     *
     * @return self
     */
    public function setIsInDispute($is_in_dispute)
    {

        if (is_null($is_in_dispute)) {
            throw new \InvalidArgumentException('non-nullable is_in_dispute cannot be null');
        }

        $this->container['is_in_dispute'] = $is_in_dispute;

        return $this;
    }

    /**
     * Gets dispute_status
     *
     * @return \Splitit\Model\DisputeStatus|null
     */
    public function getDisputeStatus()
    {
        return $this->container['dispute_status'];
    }

    /**
     * Sets dispute_status
     *
     * @param \Splitit\Model\DisputeStatus|null $dispute_status dispute_status
     *
     * @return self
     */
    public function setDisputeStatus($dispute_status)
    {

        if (is_null($dispute_status)) {
            throw new \InvalidArgumentException('non-nullable dispute_status cannot be null');
        }

        $this->container['dispute_status'] = $dispute_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


